# -*- coding: utf-8 -*-
"""fugle_realtime_Linenotify_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1opZc5CdPb3s6wIRclSUloO74X-FXPmOR

<h1>Table of Contents<span class="tocSkip"></span></h1>
<div class="toc"><ul class="toc-item"></ul></div>

# 安裝相關套件
"""

# 安裝 行情 API sdk
!pip install fugle-realtime

# 取得 fugle http API 
from fugle_realtime import HttpClient

import datetime
import pandas as pd
import requests
import time
import threading

"""# define notify function"""

class notify_setting():
    
    def __init__(self, api_token, line_token):
        
        self.api_token = api_token
        self.line_token = line_token

    def lineNotifyMessage(self, msg):
    
        headers = {
           "Authorization": "Bearer " + self.line_token, 
           "Content-Type" : "application/x-www-form-urlencoded"
       }

        payload = {'message': msg}
        r = requests.post("https://notify-api.line.me/api/notify", headers = headers, params = payload)
        return r.status_code
        
    def price_info(self, symbol_id):
        
        api_client = HttpClient(api_token=self.api_token)
        quote_data = api_client.intraday.quote(symbolId = symbol_id)['data']['quote']
        
        open_price = quote_data['priceOpen']['price']
        trade_price = quote_data['trade']['price']
        change_rate = quote_data['changePercent']
        
        url = f"https://www.fugle.tw/ai/{symbol_id}"
        
        self.open_price = open_price
        self.trade_price = trade_price
        self.change_rate = change_rate
        self.url = url
        
        
    def price_change_strategy(self, symbol_id, up_rate, down_rate):
        
        while True:
            
            self.price_info(symbol_id)
            
            if self.change_rate >= up_rate:
                
                self.lineNotifyMessage(f"\n\n OH！\n {symbol_id} 現在價格 {self.trade_price} 元 \n 漲跌幅 {self.change_rate} % \n 漲幅已超過 {str(up_rate)} % \n {self.url}")
                print('已送出提醒！')
                break                
                
            elif self.change_rate <= down_rate:
                
                self.lineNotifyMessage(f"\n\n OH！\n {symbol_id} 現在價格 {self.trade_price} 元 \n 漲跌幅 {self.change_rate} % \n 跌幅已超過 {str(-down_rate)} % \n {self.url}")
                print('已送出提醒！')
                break                
                
            else:
                print('Nothing')
                time.sleep(3)
    
    def price_strategy(self, symbol_id ,up_price, down_price):
        
        while True:
            
            self.price_info(symbol_id)
            
            if self.trade_price >= up_price:
                
                self.lineNotifyMessage(f"\n\n OH！\n {symbol_id} 現在價格 {self.trade_price} 元 \n 漲跌幅 {self.change_rate} % \n 已超過目標價 {str(up_price)} 元 \n {self.url}")
                print('已送出提醒！')
                break
                
            elif self.trade_price <= down_price:
               
                self.lineNotifyMessage(f"\n\n OH！\n {symbol_id} 現在價格 {self.trade_price} 元 \n 漲跌幅 {self.change_rate} % \n 已低於目標價 {str(down_price)} 元 \n {self.url}")
                print('已送出提醒！')
                break
                
            else:
                print('nothing')
                time.sleep(3)

#set Your API Token
api_token = 'c508904f64dce2034cb23fb7b84c00da'

#set Your line Token
line_token = 'lyFgu9PWeQNPfPcWdlyWZwpvBvRcLHBepN4gt9d0P3c'

# choose symbol_id
symbol_id = '2314'

line = notify_setting(api_token=api_token,
                      line_token=line_token)

# 執行策略一：目標價訂定
strategy_1 = threading.Thread(target=line.price_strategy, args=[symbol_id, 70, 68])
strategy_1.start()

# 執行策略二：漲跌幅訂定
strategy_2 = threading.Thread(target=line.price_change_strategy, args=[symbol_id, 8, -1])
strategy_2.start()

